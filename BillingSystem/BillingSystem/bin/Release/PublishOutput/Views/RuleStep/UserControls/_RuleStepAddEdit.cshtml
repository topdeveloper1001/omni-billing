@using BillingSystem.Model
@model RuleStep

<style>
    select {
        margin-bottom: 10px;
    }
</style>

<div class="container-fluid blueBox1" style="margin: 10px; display: none;" id="divPreviewRule">
    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <div id="lblPreviewRule"></div>
    </div>
</div>
<div class="form positionRelative" id="RuleStepFormDiv">
    @Html.HiddenFor(m => m.RuleStepID, new { @id = "hdRuleStepID" })
    @Html.HiddenFor(m => m.RuleMasterID, new { @id = "hdRuleMasterID1" })
    @Html.HiddenFor(m => m.ErrorID, new { @id = "hdErrorID" })
    @Html.HiddenFor(m => m.RHSFrom, new { @id = "hdRhsFrom" })
    @Html.HiddenFor(m => m.CreatedDate, new { @id = "hdRuleStepCreatedDate" })
    @Html.HiddenFor(m => m.CreatedBy, new { @id = "hdRuleStepCreatedBy" })

    <div class="container-fluid greyBox" style="margin: 10px; border-radius: 5px;">
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-1">
            <div class="rowTable">
                <label>Step Number:</label>
                @Html.TextBoxFor(m => m.RuleStepNumber, new { @maxlength = "6", @id = "txtRuleStepNumber", @class = "validate[required,custom[integer]]" })
            </div>

        </div>
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-5">
            <div class="rowTable">
                <label><span class="mandatoryStar"></span>Description:</label>
                @Html.TextAreaFor(m => m.RuleStepDescription, new { @maxlength = "500", @rows = "3", @id = "txtRuleStepDescription", @class = "validate[required]" })
            </div>
        </div>

        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-5">
            @*<div class="rowTable">
                <label>Effective Start Date:</label>
                @Html.TextBoxFor(m => m.EffectiveStartDate, "{0:MM/dd/yyyy}", new { @class = "dtGeneral", @maxlength = "10", @id = "dtEffectiveStartDate1" })
            </div>
            <div class="rowTable">
                <label>Effective End Date:</label>
                @Html.TextBoxFor(m => m.EffectiveEndDate, "{0:MM/dd/yyyy}", new { @maxlength = "10", @id = "dtEffectiveEndDate1", @class = "dtGeneral" })
            </div>*@
            <div class="rowTable">
                <label>Error Code:</label>
                <select id="ddlErrors"></select>
            </div>

        </div>

        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-1">
            <div class="rowTable">
                <label>Is Active:</label>
                @{
                    var isActive = false;
                    if (Model != null && Model.IsActive != null)
                    {
                        isActive = (bool)Model.IsActive;
                    }
                }
                @Html.CheckBoxFor(m => isActive, new { @id = "chkIsActive" })
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="col-xs-12 col-sm-6 col-md-1 col-lg-1 yellowBox2 margin15 font11px">
            <div class="rowTable spanRowFW">
                <label class="colorCodeTitle"><span class="mandatoryStar"></span>Condition Start:</label>
                @Html.HiddenFor(m => m.ConStart, new { @id = "hdConStart" })
                <select id="ddlConStart"  class="validate[required]"></select>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3 col-lg-3 yellowBox2 margin15 font11px">
            <div class="rowTable spanRowFW" id="DivLHSFrom">
                <label class="colorCodeTitle">
                    Selector Section:
                </label>
            </div>
            <div class="rowTable">
                @*<label>LHST (Left Hand Side Table):</label>*@
                <label><span class="mandatoryStar"></span>Reference Table:</label>
                @Html.HiddenFor(m => m.LHST, new { @id = "hdLHST" })
                <select id="ddlLHST" class="validate[required]" onchange="OnChangeTableDropdown('#ddlLHST',1);"></select>
            </div>
            <div class="rowTable">
                @*<label>LSHC (Column to compare):</label>*@
                <label><span class="mandatoryStar"></span>Data Item Description:</label>
                @Html.HiddenFor(m => m.LHSC, new { @id = "hdLHSC" })
                <select id="ddlLHSC" class="validate[required]" onchange="GetFieldDataType()"></select>
            </div>
            <div class="rowTable">
                @*<label>LHSK (Table Key Column):</label>*@
                <label><span class="mandatoryStar"></span>Key Reference:</label>
                @Html.HiddenFor(m => m.LHSK, new { @id = "hdLHSK" })
                <select id="ddlLHSK" disabled="disabled" class="validate[required]"></select>
            </div>
            <div class="rowTable inline_field">
                @*<label>Is Advanced:</label>*@
                <label>Detail Line Level:</label>
                @Html.CheckBoxFor(m => m.IsAdvanced, new { @id = "chkIsAdvanced", @onchange = "OpenAdvancedPopup(this);" })
            </div>
            @{
                var divLeftChange = Model.IsAdvanced ? "" : "display: none;";
            }
            <div id="divLeftChange" style='@divLeftChange'>
                <a class="btn btn-xs btn-default" style="margin: 8px 0 5px;" onclick="ShowHideRHSDivs('#divLeftExpression');">Expression</a>

                <div id="lhsFromCustomQuery">
                    @Model.LhsQueryValue
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-2 col-lg-2 yellowBox2 margin15 font11px">
            <div class="rowTable">
                <label class="colorCodeTitle"><span class="mandatoryStar"></span>Compare Type:</label>
                @Html.HiddenFor(m => m.CompareType, new { @id = "hdCompareType" })
                <select id="ddlCompareType" class="validate[required]" onchange="CompareTypeOnChange(this);"></select>
            </div>
            <div class="rowTable">
                <label><span class="mandatoryStar"></span>Data Type:</label>
                @Html.HiddenFor(m => m.DataType, new { @id = "hdDataType" })
                <select id="ddlDataTypes" class="validate[required]" onchange="SetColumnValueValidation();"></select>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3 col-lg-3 yellowBox2 margin15 font11px">
            <div class="rowTable spanRowFW" id="DivRHSFrom">
                <label class="colorCodeTitle">
                    Comparer Section:
                </label>
                <label>
                    RHS (Right Hand Side) From:
                </label>
                <span>Table
                    <input type="radio" id="rdRhsFromTable" class="rdRhsFrom" onchange="ToggleRadioButtons('#rdRhsFromTable','.rdRhsFrom'); ShowHideRHSDivs('#rhsFromTable');" checked="checked" />
                </span>
                <span>Direct Value
                    <input type="radio" id="rdRhsFromDirectValue" class="rdRhsFrom" onchange="ToggleRadioButtons('#rdRhsFromDirectValue','.rdRhsFrom'); ShowHideRHSDivs('#rhsFromDirectValue');" />
                </span>
                <span>Range Value
                    <input type="radio" id="rdRhsFromQueryString" class="rdRhsFrom" onchange="ToggleRadioButtons('#rdRhsFromQueryString','.rdRhsFrom'); ShowHideRHSDivs('#rhsFromQueryString');" />
                </span>
                <span>Expression
                    <input type="radio" id="rdRhsFromCustomQuery" class="rdRhsFrom" onchange="ToggleRadioButtons('#rdRhsFromCustomQuery','.rdRhsFrom'); ShowHideRHSDivs('#divExpression');" />
                </span>
            </div>
            <div class="rhsFromDiv" id="rhsFromTable">
                <div class="rowTable">
                    @*<label>RHST (Right Hand Side Table):</label>*@
                    <label>Comparer Table:</label>
                    @Html.HiddenFor(m => m.RHST, new { @id = "hdRHST" })
                    <select id="ddlRHST" onchange="OnChangeTableDropdown('#ddlRHST',2)"></select>
                </div>
                <div class="rowTable">
                    @*<label>RHSC (Column to compare):</label>*@
                    <label>Column to compare:</label>
                    @Html.HiddenFor(m => m.RHSC, new { @id = "hdRHSC" })
                    <select id="ddlRHSC"></select>
                </div>
                <div class="rowTable">
                    @*<label>RHSK (Key Column):</label>*@
                    <label>Key Reference:</label>
                    @Html.HiddenFor(m => m.RHSK, new { @id = "hdRHSK" })
                    <select id="ddlRHSK" disabled="disabled"></select>
                </div>
            </div>
            <div id="rhsFromDirectValue" style="display: none;" class="rhsFromDiv">
                <div class="rowTable">
                    <label>Direct Value:</label>
                    @Html.TextAreaFor(m => m.DirectValue, new { @id = "txtDirectValue", @maxlength = "250", @placeholder = "Enter Direct Value...", @style = "height: 88px;", @class = "DirectVal" })
                </div>
            </div>
            <div id="rhsFromQueryString" style="display: none;" class="rhsFromDiv">
                <div class="rowTable">
                    <label>First  Value:</label>
                    @Html.TextBoxFor(m => m.DirectValue, new { @id = "txtDirectValue", @maxlength = "25", @placeholder = "Enter First Value...", @style = "display:none;", @class = "RangeVal" })
                </div>
                <div class="rowTable">
                    <label>Second Value:</label>
                    @Html.TextBoxFor(m => m.QueryString, new { @id = "txtQueryString", @maxlength = "25", @placeholder = "Enter Second Value..." })
                </div>
            </div>
            @{
                var cqStyle = Model.RHSFrom == 4 ? "" : "display: none;";
            }
            <div id="divChange" style='@cqStyle'>
                <a class="change_expersion" onclick="ShowHideRHSDivs('#divExpression');">Change</a>

                <div id="rhsFromCustomQuery" style='@cqStyle' class="rhsFromDiv">
                    @Model.QueryText
                </div>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-1 col-lg-1 yellowBox2 margin15 font11px">

            <div class="rowTable spanRowFW">
                <label class="colorCodeTitle">Condition End:</label>
                @Html.HiddenFor(m => m.ConEnd, new { @id = "hdConEnd" })
                <select id="ddlConEnd"></select>
            </div>
        </div>
        <div class="previewHide greyBox previewStyle" id="divPreview">Preview</div>

        <div class="clear"></div>

        <div class="btn-group">
            <div style="float: left;">
                @{
                    var saveText = "Save";
                    if (Model.RuleStepID != null && Model.RuleStepID > 0)
                    {
                        saveText = "Update";
                    }
                }
                <input id="BtnRuleStepSave" type="submit" onclick="return SaveRuleStep();" class="btn btn-primary edit-btn marginBtn" value="@saveText" />

                <button name="ClientCancel" class="btn btn-primary edit-btn marginBtn" type="button" onclick="return ClearRuleStepForm();">Cancel</button>
                @*<input type="submit" class="btn btn-primary edit-btn marginBtn" value="Preview" onclick="ShowHidePreviewDiv();" />*@
            </div>
        </div>
        <input type="hidden" id="hdExpression" value='@Model.QueryExpression' />
        <input type="hidden" id="hfReferencedIndicators" value="" />
 
        <div id="divExpression" style="display: none; z-index: 99999; overflow-y: hidden;" class="modal fade in expression_popup" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content" style="opacity: 1;">
                    <div class="modal-header">
                        <h4 class="modal-title">Create Expression</h4>
                    </div>
                    <div class="modal-body">
                        <div class="rowTable">
                            <label>Expression:</label>
                            <textarea id="txtExpression" style="height: 60px; display: none;">@Model.QueryText</textarea>
                            <label class="readonly_label" id="lblExpression" style="height: 60px;">@Model.QueryText</label>
                        </div>
                        <div class="example alert alert-warning">
                            <h4>Example:</h4>
                            <p id="pExample"></p>
                        </div>
                        <div class="popupStuff">
                            <div class="settingBtns">
                                <input id="btnCleartext" type="button" class="btn btn-danger edit-btn pull-right" onclick="return SetValueInTextBox('clear');"
                                    value="Clear" />
                                <input type="button" class="btn btn-default edit-btn" title="(Table-Column-Key Column) + (Table-Column-Key Column)" onclick="return SetValueInTextBox('+');" value="+" />
                                @*<input type="button" class="btn btn-default edit-btn" onclick="return SetValueInTextBox('-');" value="-" />
                                <input type="button" class="btn btn-default edit-btn" onclick="return SetValueInTextBox('*');" value="*" />
                                <input type="button" class="btn btn-default edit-btn" onclick="return SetValueInTextBox('/');" value="/" />*@
                                @*<input type="button" class="btn btn-default edit-btn" onclick="return SetValueInTextBox('(');" value="(" />
                                <input type="button" class="btn btn-default edit-btn" onclick="return SetValueInTextBox(')');" value=")" />*@
                                <input type="button" class="btn btn-default edit-btn" title="Count(Table-Column-Key Column)" onclick="return SetValueInTextBox('c');" value="Count" />
                                <input type="button" class="btn btn-default edit-btn" title="Sum(Table-Column-Key Column)" onclick="return SetValueInTextBox('s');" value="Sum" />
                                @*<input type="button" class="btn btn-default edit-btn" onclick="return SetValueInTextBox('m');" value="Max" />*@
                                <input type="button" class="btn btn-default edit-btn" title="TimeSpan(Table-Column-Key Column)" onclick="return SetValueInTextBox('ts');" value="Time Span" />
                                <input type="button" class="btn btn-default edit-btn" title="Latest(Table-Column-Key Column)" onclick="return SetValueInTextBox('l');" value="Latest" />
                                <input type="button" class="btn btn-default edit-btn" title="Multi-Range" onclick="return SetValueInTextBox('mr');" value="Multiple Range" />
                                @Html.HiddenFor(m => m.QueryFunctionType, new { @id = "hfQueryFunctionTypePopup" })
                                @{
                                    var csPopup = Model.QueryFunctionType != null ? Model.QueryFunctionType == "2" ? "" : "display: none;" : "display: none;";
                                    var tsPopup = Model.QueryFunctionType != null ? Model.QueryFunctionType == "5" ? "" : "display: none;" : "display: none;";
                                    var mrPopup = Model.QueryFunctionType != null ? Model.QueryFunctionType == "10" ? "" : "display: none;" : "display: none;";
                                    var hideMainDiv = Model.QueryFunctionType != null ? Model.QueryFunctionType == "10" ? "display: none;" : "" : "";
                                }
                                <div id="divShowForCount" class="expersion_blk" style='@csPopup'>
                                    <label>Compare Type:</label>
                                    <select id="ddlCompareTypePopup"></select>
                                    @Html.HiddenFor(m => m.ExtValue1, new { @id = "hdCompareTypePopup" })
                                    <label>Value:</label>
                                    <input type="text" id="txtCountValue" value='@Model.ExtValue2'/>
                                </div>
                                <div id="divShowForTimeSpan" class="expersion_blk" style='@tsPopup'>
                                    <label>Compare Type:</label>
                                    <select id="ddlCompareTypeTSPopup"></select>
                                    @Html.HiddenFor(m => m.ExtValue1, new { @id = "hdCompareTypeTSPopup" })
                                    <label>Time Span:</label>
                                    @*<input type="text" id="dtTimePicker" onchange="TimeSpanFn(this);" value='@Model.ExtValue2' placeholder="Time In Hour" class="validate[custom[integer]]" />*@
                                    <input type="text" id="dtTimePicker" onchange="TimeSpanFn(this);" value='@Model.ExtValue2' placeholder="Time In Hour" />
                                </div>
                                <div class="expersion_blk between_clause_scroll" id="divBetween" style='@mrPopup' >
                                    <div class="row">
                                        <div class="col-md-10" id="divMultiRange">
                                            <div id="dmr1" class="between_clause">
                                                <label class="between_lbl">Between</label>
                                                <input type="text" id="blhs1" />
                                                <label class="and_lbl">AND</label>
                                                <input type="text" id="brhs1" />
                                                <select id="selmr1">
                                                    <option value="0">--Select--</option>
                                                    <option value="1">AND</option>
                                                    <option value="2">OR</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-md-2">
                                            <input type="button" value="Add" onclick="CreateDynamicBetween();" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="settingBtns2">
                                @*<input id="btnBackspace" type="button" class="btn btn-success edit-btn" onclick="return SetValueInTextBox('backspace');"
                            value="Backspace" />*@
                                @*<input id="btnUndo" type="button" class="btn btn-success edit-btn" onclick="return SetValueInTextBox('undo');"
                                    value="Undo" />*@

                            </div>
                            @*<div class="propertyType">
                    <asp:label id="lblExpressionType" runat="server" text="<%$ Resources:Resource,expressionType%>"></asp:label>
                    <asp:dropdownlist id="ddlExpressionType" onchange="return OnExpressionTypeChange();"
                        runat="server">
                                        </asp:dropdownlist>
                </div>*@

    <div class="" id="rhsFromTable" style='@hideMainDiv'>
        <div class="row">
            <div class="col-md-6">
                <div class="rowTable">
                    <label>Table:</label>
                    @Html.HiddenFor(m => m.RHST, new { @id = "hdRHSTPopup" })
                    <select id="ddlRHSTPopup" onchange="OnChangeTableDropdown('#ddlRHSTPopup',2)"></select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="rowTable">
                    <label>Column:</label>
                    @Html.HiddenFor(m => m.RHSC, new { @id = "hdRHSCPopup" })
                    <select id="ddlRHSCPopup"></select>
                </div>
            </div>
            <div class="col-md-6">
                <div class="rowTable">
                    <label>Key Column:</label>
                    @Html.HiddenFor(m => m.RHSK, new { @id = "hdRHSKPopup" })
                    <select id="ddlRHSKPopup"></select>
                </div>
            </div>
        </div>
    </div>

                            <div class="settingBtns2">
                                <input type="button" class="btn btn-success btn-sm edit-btn" onclick="return SetValueInTextBox('Add');" value="Add" />

                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input id="btnSaveExpression" class="btn btn-primary btn-sm edit-btn" onclick="return SetValueInTextBox('done');" type="button"
                            value="Save" />
                        <input id="btnCancelExpression" class="btn btn-default btn-sm edit-btn" onclick="return SetValueInTextBox('cancel');" type="button"
                            value="Cancel" />
                        @*<input id="btnSpace" onclick="return SetValueInTextBox('space');" type="button" value="Space" />*@
                    </div>

                </div>

            </div>
        </div>
        <input type="hidden" id="hdAdvancedExpression" value='@Model.LhsQueryValue' />
        <input type="hidden" id="hfLHSExp" value="0" />
        <div id="divLeftExpression" style="display: none; z-index: 99999; overflow-y: hidden;" class="modal fade in expression_popup" role="dialog">
            <div class="modal-dialog">

                <!-- Modal content-->
                <div class="modal-content" style="opacity: 1;">
                    <div class="modal-header">
                        <h4 class="modal-title">Create Expression</h4>
                    </div>
                    <div class="modal-body">
                        <div class="rowTable">
                            <label>Expression:</label>
                            <textarea id="txtLeftExpression" style="height: 60px; display: none;">@Model.LhsQueryValue</textarea>
                            <label class="readonly_label" id="lblLeftExpression" style="height: 60px;">@Model.LhsQueryValue</label>
                        </div>
                        @*<div class="example alert alert-warning">
                            <h4>Example:</h4>
                            <p id="pLHSExample"></p>
                        </div>*@
                        <div class="popupStuff">
                            <div class="settingBtns">
                                <input id="btnLeftCleartext" type="button" class="btn btn-danger edit-btn pull-right" onclick="return SetLeftValueInTextBox('clear');"
                                    value="Clear" />
                                <input type="button" class="btn btn-default edit-btn" title="AND" onclick="return SetLeftValueInTextBox('a');" value="AND" />
                                <input type="button" class="btn btn-default edit-btn" title="OR" onclick="return SetLeftValueInTextBox('o');" value="OR" />
                                <input type="button" class="btn btn-default edit-btn" title="Length" onclick="return SetLeftValueInTextBox('lg');" value="Length" />
                                <input type="button" class="btn btn-default edit-btn" title="Distinct" onclick="return SetLeftValueInTextBox('dis');" value="Distinct" />
                            </div>
                            <div class="settingBtns2">
                            </div>
                            @*<div class="propertyType">
                    <asp:label id="lblExpressionType" runat="server" text="<%$ Resources:Resource,expressionType%>"></asp:label>
                    <asp:dropdownlist id="ddlExpressionType" onchange="return OnExpressionTypeChange();"
                        runat="server">
                                        </asp:dropdownlist>
                </div>*@
                            <div class="" id="lhsFromTable">
                                @*<div class="rowTable">
                                    <label>Table:</label>
                                    @Html.HiddenFor(m => m.RHST, new { @id = "hdLHSTPopup" })
                                    <select id="ddlLHSTPopup" onchange="OnChangeTableDropdown('#ddlLHSTPopup',1);"></select>
                                </div>*@
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="rowTable">
                                            <label>Column:</label>
                                            @Html.HiddenFor(m => m.RHSC, new { @id = "hdLHSCPopup" })
                                            <select id="ddlLHSCPopup"></select>
                                        </div>
                                    </div>
                                    @*<div class="rowTable">
                                    <label>Key Column:</label>
                                    @Html.HiddenFor(m => m.RHSK, new { @id = "hdLHSKPopup" })
                                    <select id="ddlLHSKPopup"></select>
                                </div>*@
                                    <div id="hideTextBox">
                                        <div class="col-md-6">
                                            <div class="rowTable">
                                                <label>Value:</label>
                                                <input type="text" id="txtLHSValue" value='@Model.ExtValue3' />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            @{
                                var lhsShowForCount = Convert.ToString(Model.LhsCompareType) != "" ? "" : "display: none;";
                            }
                            <div id="divLhsShowForCount" class="expersion_blk" style='@lhsShowForCount'>
                                <label>Compare Type:</label>
                                <select id="ddlLhsCompareTypePopup"></select>
                                @Html.HiddenFor(m => m.LhsCompareType, new { @id = "hdLhsCompareTypePopup" })
                                <label>Value:</label>
                                <input type="text" id="txtLhsCountValue" value='@Model.LhsComparerValue'/>
                            </div>
                            <div class="settingBtns2">
                                <input type="button" class="btn btn-success btn-sm edit-btn" onclick="return SetLeftValueInTextBox('Add');" value="Add" />

                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <input id="btnLeftSaveExpression" class="btn btn-primary btn-sm edit-btn" onclick="return SetLeftValueInTextBox('done');" type="button"
                            value="Save" />
                        <input id="btnLeftCancelExpression" class="btn btn-default btn-sm edit-btn" onclick="return SetLeftValueInTextBox('cancel');" type="button"
                            value="Cancel" />
                    </div>

                </div>

            </div>
        </div>
        <div class="overlay" style="display: none"></div>

    </div>
</div>

<script>
    function TimeSpanFn(e) {
        var val = parseInt($(e).val());
        if (val < 1 || val > 24) {
            $("#dtTimePicker").val('');
        }
    }

</script>
