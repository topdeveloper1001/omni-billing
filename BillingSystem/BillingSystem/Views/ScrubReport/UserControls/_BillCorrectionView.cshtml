@using BillingSystem.Model.CustomModel

@model ScrubReportCustomModel

@{
    var dtFormat = string.Empty;
    if (Model != null && !string.IsNullOrEmpty(Model.CssClass) && Model.CssClass.ToLower().Contains("date"))
    {
        dtFormat = "{0:MM/dd/yyyy}";
    }
}

<style>
    .btn-group {
        margin-left: 0;
        margin-top: 15px;
    }

    .txtRHSValueformError {
        z-index: 9999;
    }

    .txtLHSValueformError {
        z-index: 9999;
    }
</style>

<div class="form labelBold">
    @Html.HiddenFor(m => m.CssClass, new { @id = "hdCssClass" })
    @Html.HiddenFor(m => m.PatientId, new { @id = "hdPatientId" })
    @Html.HiddenFor(m => m.EncounterId, new { @id = "hdEncounterId" })
    <div class="container-fluid summery-bg" style="margin-bottom: 20px;">
        <div class="col-xs-12 col-sm-6 col-md-1 col-lg-1">
            <div class="rowTable">
                <label>Scrub Report ID:</label>
                <span>@Model.ScrubReportID</span>
                @Html.HiddenFor(m => m.ScrubReportID, new { @id = "hdScrubReportId" })
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3 col-lg-3">
            <div class="rowTable">
                <label>Rule Master Description:</label>
                <span>@Model.RuleMasterDesc</span>
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-4" style="margin-top: 0;">
            <div class="rowTable">
                <label>Rule Step Description: </label>
                <span>@Model.RuleStepDesc</span>
                @Html.HiddenFor(m => m.RuleStepID, new { @id = "hdRuleStepID" })
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3 col-lg-3">
            <div class="rowTable">
                <label>Error:</label>
                <span>@Model.ErrorText</span>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        
            @if ((!string.IsNullOrEmpty(Model.RHSV) && Model.RHSV.ToLower().Contains("multiple")) || (!string.IsNullOrEmpty(Model.RHSV) && Model.LHSV.ToLower().Contains("multiple")) ||
                Model.RuleMasterDesc.ToLower().Contains("diagnosis") || Model.ExtValue4 != "0")
            {
                <div class="alert alert-danger">To fix this rule, please go to <strong>"Enter Charges Manually"</strong> Screen</div>
            }
        <div class="col-xs-12 col-sm-5 col-md-1 col-lg-1" style="background: #f5f5f5; border: solid 1px #ddd; padding: 20px;">
            <div class="rowTable text-center">
                <label>Rule Status</label>
                <span>
                    <img src="@Url.Content("~/images/warning32x32.png")" id="imgScrubReportStatus" alt="Bill Edit Failure" />
                </span>
            </div>
            @*<div class="rowTable">
                <label>
                    Corrections:
                </label>
                <label>
                    LHSV:
                    <input type="radio" id="rdLHSV" class="rdCorrection" checked="checked" onchange="ToggleRadioButtons('#rdLHSV','.rdCorrection'); DisableTextFields();" value="1" />
                </label>
                <label>
                    RHSV:
                    <input type="radio" id="rdRHSV" class="rdCorrection" onchange="ToggleRadioButtons('#rdRHSV','.rdCorrection'); DisableTextFields();" value="2" />
                </label>
            </div>*@
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3 col-lg-3 greenBorder marginLR10">
            <div class="rowTable">
                <label class="greenTitle">System Value</label>
                 @if (Model.RHSVDesc.ToLower() != "direct value")
                 {
                      <label>@Html.DisplayFor(x => x.LHSVDesc):</label>
                     if ((!string.IsNullOrEmpty(Model.LHSV)))
                     {
                         @Html.TextBoxFor(m => m.LHSV, dtFormat, new {@id = "txtLHSValue", @class = "correctedValue", @title = Html.DisplayFor(x => x.LHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();",@disabled="disabled"})
                     }
                     else
                     {
                         @Html.TextBoxFor(m => m.LHSV, dtFormat, new {@id = "txtLHSValue", @class = " ", @title = Html.DisplayFor(x => x.LHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();",@disabled="disabled"})
                     }
                 }
                 else
                 {
                     <label>@Html.DisplayFor(x => x.RHSVDesc):</label>
                     if ((!string.IsNullOrEmpty(Model.RHSV)) && (Model.CompareTypeText.ToLower() != "between"))
                     {
                         @Html.TextBoxFor(m => m.RHSV, dtFormat, new {@id = "txtRHSValue", @class = "correctedValue", @title = Html.DisplayFor(x => x.RHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();",@disabled="disabled"})
                     }
                     else
                     {
                         @Html.TextBoxFor(m => m.RHSV, dtFormat, new {@id = "txtRHSValue", @class = " ", @title = Html.DisplayFor(x => x.RHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();",@disabled="disabled"})
                     }
                 }
            </div>
        </div>
        <div class="col-xs-12 col-sm-5 col-md-4 col-lg-4 yellowBox2 marginLeft10 marginBottom10" style="margin-top: 0;">
            <div class="rowTable" style="text-align: center;">
                <label>Compare Type:</label>
                <span id="compareTypeSpan">@Model.CompareTypeText</span>
            </div>
            <div class="rowTable" style="text-align: center;">
                <label>Correction Code:</label>
                <select id="ddlCorrectionCodeList" name="ddlCorrectionCodeList" class="validate[required]"></select>
                @Html.HiddenFor(m => m.ExtValue4, new { @id = "hdCorrectionCode" })
            </div>
        </div>
        <div class="col-xs-12 col-sm-6 col-md-3 col-lg-3 corrected_val marginLR10">
            <div class="rowTable">
                <label class="scrubtitle">Value to be corrected</label>
                <input type="hidden" name="hidDirectDesc" value="@Model.RHSVDesc.ToLower()" id ="hdRHSVDesc" />
                @if (Model.RHSVDesc.ToLower() != "direct value")
                {
                    <label>@Html.DisplayFor(x => x.RHSVDesc):</label>
                    if ((!string.IsNullOrEmpty(Model.RHSV)) && (Model.CompareTypeText.ToLower() != "between"))
                    {
                        @Html.TextBoxFor(m => m.RHSV, dtFormat, new { @id = "txtRHSValue", @class = "correctedValue", @title = Html.DisplayFor(x => x.RHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();" })
                    }
                    else
                    {
                        @Html.TextBoxFor(m => m.RHSV, dtFormat, new { @id = "txtRHSValue", @class = " ", @title = Html.DisplayFor(x => x.RHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();" })
                    }
                }
                else
                {
                     <label>@Html.DisplayFor(x => x.LHSVDesc):</label>
                      if ((!string.IsNullOrEmpty(Model.LHSV)))
                      {
                          @Html.TextBoxFor(m => m.LHSV, dtFormat, new {@id = "txtLHSValue", @class = "correctedValue", @title = Html.DisplayFor(x => x.LHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();"})
                      }
                      else
                      {
                          @Html.TextBoxFor(m => m.LHSV, dtFormat, new {@id = "txtLHSValue", @class = " ", @title = Html.DisplayFor(x => x.LHSVDesc), @onblur = "OnBlurCheckNewValuesStatus();"})
                      }
                }
            </div>
        </div>
    </div>
    <div class="container-fluid">
        @*<div class="col-xs-12 col-sm-6 col-md-9 col-lg-9 yellowBox3 marginTop marginLeft10">
            <label>#Note:@Html.DisplayFor(m => m.ErrorResolutionTxt)</label>
        </div>*@

            <div class="btn-group">
                @*<input type="submit" class="blue-btn btn btn-primary edit-btn marginBtn" value="Preview" />*@
                @if ((!string.IsNullOrEmpty(Model.RHSV) && Model.RHSV.ToLower().Contains("multiple")) || (!string.IsNullOrEmpty(Model.RHSV) && Model.LHSV.ToLower().Contains("multiple"))
                    || Model.RuleMasterDesc.ToLower().Contains("diagnosis") || Model.ExtValue4 != "0")
                {
                    <input type="submit" class="blue-btn btn btn-primary edit-btn marginBtn disabled" value="Save" onclick="UpdateValueInScrubReport('@Model.ScrubReportID'); " />
                    <button name="ClientCancel" class="blue-btn btn btn-primary edit-btn marginBtn disabled" onclick=" $('#divhidepopup1').hide(); $.validationEngine.closePrompt('.formError', true); " type="button">Cancel</button>
                }
                else
                {
                    <input type="submit" class="blue-btn btn btn-primary edit-btn marginBtn" value="Save" onclick="UpdateValueInScrubReport('@Model.ScrubReportID'); " />
                    <button name="ClientCancel" class="blue-btn btn btn-primary edit-btn marginBtn" onclick=" $('#divhidepopup1').hide(); $.validationEngine.closePrompt('.formError', true); " type="button">Cancel</button>
                }
            </div>
    </div>
    <div class="clear"></div>
</div>
