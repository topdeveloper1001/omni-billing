//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.ModelConfiguration.Conventions;
using BillingSystem.Model.Model;

namespace BillingSystem.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Linq;

    public class BillingEntities : DbContext
    {
        public BillingEntities()
            : base("name=BillingEntities")
        {
            this.Configuration.ProxyCreationEnabled = false;
            this.Configuration.LazyLoadingEnabled = false;
            Database.SetInitializer<BillingEntities>(null);
            var type = typeof(System.Data.Entity.SqlServer.SqlProviderServices);
            ((IObjectContextAdapter)this).ObjectContext.CommandTimeout = 300;
            this.Database.Log = s => System.Diagnostics.Debug.WriteLine(s);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<PluralizingTableNameConvention>();// remove pluralization 
            base.OnModelCreating(modelBuilder);
        }

        public DbSet<MedicalNecessity> MedicalNecessity { get; set; }

        public DbSet<FavoriteClinician> FavoriteClinician { get; set; }
        public DbSet<ClinicianAppointmentType> ClinicianAppointmentType { get; set; }
        public DbSet<AppointmentTypes> AppointmentTypes { get; set; }
        public DbSet<Categories> Categories { get; set; }
        public DbSet<TechnicalSpecifications> TechnicalSpecifications { get; set; }
        public DbSet<ATCCodes> ATCCodes { get; set; }
        public DbSet<AuditLog> AuditLog { get; set; }
        public DbSet<AuditLogArchived> AuditLogArchived { get; set; }
        public DbSet<Authorization> Authorization { get; set; }
        //public DbSet<Authorizations> Authorizations { get; set; }
        public DbSet<BedCharges> BedCharges { get; set; }
        public DbSet<BedRateCard> BedRateCard { get; set; }
        public DbSet<BillActivity> BillActivity { get; set; }
        public DbSet<BillHeader> BillHeader { get; set; }
        public DbSet<BillingCodeTableSet> BillingCodeTableSet { get; set; }
        public DbSet<BillingSystemParameters> BillingSystemParameters { get; set; }
        public DbSet<Careplan> Careplan { get; set; }
        public DbSet<CarePlanTask> CarePlanTask { get; set; }
        public DbSet<City> City { get; set; }
        public DbSet<Corporate> Corporate { get; set; }
        public DbSet<Country> Country { get; set; }
        public DbSet<CountryCode> CountryCode { get; set; }
        public DbSet<CountryHoliday> CountryHoliday { get; set; }
        public DbSet<CPTCodes> CPTCodes { get; set; }
        public DbSet<CPTCodeTypes> CPTCodeTypes { get; set; }
        public DbSet<DashboardBudget> DashboardBudget { get; set; }
        //public DbSet<DashboardData> DashboardData { get; set; }
        public DbSet<DashboardDisplayOrder> DashboardDisplayOrder { get; set; }
        public DbSet<DashboardIndicatorData> DashboardIndicatorData { get; set; }
        //public DbSet<DashboardIndicatorData_BKUP> DashboardIndicatorData_BKUP { get; set; }
        public DbSet<DashboardIndicatorData_Template> DashboardIndicatorData_Template { get; set; }
        public DbSet<DashBoardIndicatorEffects> DashBoardIndicatorEffects { get; set; }
        public DbSet<DashboardIndicators> DashboardIndicators { get; set; }
        public DbSet<DashboardParameters> DashboardParameters { get; set; }
        public DbSet<DashboardRemark> DashboardRemark { get; set; }
        public DbSet<DashboardTargets> DashboardTargets { get; set; }
        public DbSet<DashboardTransactionCounter> DashboardTransactionCounter { get; set; }
        public DbSet<DeptTimming> DeptTimming { get; set; }
        public DbSet<Denial> Denial { get; set; }
        public DbSet<Diagnosis> Diagnosis { get; set; }
        public DbSet<DiagnosisCode> DiagnosisCode { get; set; }
        public DbSet<DischargeSummaryDetail> DischargeSummaryDetail { get; set; }
        public DbSet<DocumentsTemplates> DocumentsTemplates { get; set; }
        public DbSet<DRGCodes> DRGCodes { get; set; }
        public DbSet<Drug> Drug { get; set; }
        public DbSet<DrugAllergyLog> DrugAllergyLog { get; set; }
        public DbSet<DrugInstructionAndDosing> DrugInstructionAndDosing { get; set; }
        public DbSet<DrugInteractions> DrugInteractions { get; set; }
        public DbSet<ELMAH_Error> ELMAH_Error { get; set; }
        public DbSet<EmailTempelate> EmailTempelate { get; set; }
        public DbSet<Encounter> Encounter { get; set; }
        public DbSet<EquipmentLog> EquipmentLog { get; set; }
        public DbSet<EquipmentMaster> EquipmentMaster { get; set; }
        public DbSet<ErrorMaster> ErrorMaster { get; set; }
        public DbSet<Facility> Facility { get; set; }
        public DbSet<FacilityDepartment> FacilityDepartment { get; set; }
        public DbSet<FacilityRole> FacilityRole { get; set; }
        public DbSet<FacilityStructure> FacilityStructure { get; set; }
        public DbSet<FacultyRooster> FacultyRooster { get; set; }
        public DbSet<FacultyTimeslots> FacultyTimeslots { get; set; }
        public DbSet<FutureOpenOrder> FutureOpenOrder { get; set; }
        public DbSet<FutureOrderActivity> FutureOrderActivity { get; set; }
        public DbSet<GlobalCodeCategory> GlobalCodeCategory { get; set; }
        public DbSet<GlobalCodes> GlobalCodes { get; set; }
        public DbSet<HCPCSCodes> HCPCSCodes { get; set; }
        public DbSet<HolidayPlanner> HolidayPlanner { get; set; }
        public DbSet<HolidayPlannerDetails> HolidayPlannerDetails { get; set; }
        public DbSet<IndicatorDataCheckList> IndicatorDataCheckList { get; set; }
        public DbSet<InsuranceCompany> InsuranceCompany { get; set; }
        public DbSet<InsurancePlans> InsurancePlans { get; set; }
        public DbSet<InsurancePolices> InsurancePolices { get; set; }
        public DbSet<LabTestOrderSet> LabTestOrderSet { get; set; }
        public DbSet<LabTestResult> LabTestResult { get; set; }
        public DbSet<LoginTracking> LoginTracking { get; set; }
        public DbSet<FacilityContact> FacilityContact { get; set; }
        public DbSet<OtherPatientForm> OtherPatientForm { get; set; }
        public DbSet<ManagedCare> ManagedCare { get; set; }
        public DbSet<ManualChargesTracking> ManualChargesTracking { get; set; }
        public DbSet<ManualDashboard> ManualDashboard { get; set; }
        public DbSet<MappingPatientBed> MappingPatientBed { get; set; }
        public DbSet<MappingRole> MappingRole { get; set; }
        public DbSet<MaxValues> MaxValues { get; set; }
        public DbSet<MCContract> MCContract { get; set; }
        public DbSet<MCContractTracking> MCContractTracking { get; set; }
        public DbSet<MCOrderCodeRates> MCOrderCodeRates { get; set; }
        public DbSet<MCRulesTable> MCRulesTable { get; set; }
        public DbSet<MedicalHistory> MedicalHistory { get; set; }
        public DbSet<MedicalNotes> MedicalNotes { get; set; }
        public DbSet<MedicalRecord> MedicalRecord { get; set; }
        public DbSet<MedicalVital> MedicalVital { get; set; }
        public DbSet<ModuleAccess> ModuleAccess { get; set; }
        public DbSet<ModuleStepTracking> ModuleStepTracking { get; set; }
        public DbSet<OpenOrder> OpenOrder { get; set; }
        public DbSet<OpenOrderActivitySchedule> OpenOrderActivitySchedule { get; set; }
        public DbSet<OpenOrderActivityTime> OpenOrderActivityTime { get; set; }
        public DbSet<OperatingRoom> OperatingRoom { get; set; }
        public DbSet<OrderActivity> OrderActivity { get; set; }
        public DbSet<Parameters> Parameters { get; set; }
        public DbSet<PatientAddressRelation> PatientAddressRelation { get; set; }
        public DbSet<PatientDischargeSummary> PatientDischargeSummary { get; set; }
        public DbSet<PatientEvaluation> PatientEvaluation { get; set; }
        public DbSet<PatientInfo> PatientInfo { get; set; }
        public DbSet<PatientInfoChangesQueue> PatientInfoChangesQueue { get; set; }
        public DbSet<PatientInsurance> PatientInsurance { get; set; }
        public DbSet<PatientLoginDetail> PatientLoginDetail { get; set; }
        public DbSet<PatientCareActivities> PatientCareActivities { get; set; }
        public DbSet<PatientCarePlan> PatientCarePlan { get; set; }
        public DbSet<PatientPhone> PatientPhone { get; set; }
        public DbSet<PatientPreScheduling> PatientPreScheduling { get; set; }
        public DbSet<Payment> Payment { get; set; }
        public DbSet<PaymentTypeDetail> PaymentTypeDetail { get; set; }
        public DbSet<PatientEvaluationSet> PatientEvaluationSet { get; set; }
        public DbSet<Physician> Physician { get; set; }
        public DbSet<PreSchedulingLink> PreSchedulingLink { get; set; }
        public DbSet<ProjectDashboard> ProjectDashboard { get; set; }
        public DbSet<Projects> Projects { get; set; }
        public DbSet<ProjectTargets> ProjectTargets { get; set; }
        public DbSet<ProjectTasks> ProjectTasks { get; set; }
        public DbSet<ProjectTaskTargets> ProjectTaskTargets { get; set; }
        public DbSet<ReferencedIndicators> ReferencedIndicators { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<RolePermission> RolePermission { get; set; }
        public DbSet<RoleTabs> RoleTabs { get; set; }
        public DbSet<RoomOccupancy> RoomOccupancy { get; set; }
        public DbSet<RuleMaster> RuleMaster { get; set; }
        public DbSet<RuleStep> RuleStep { get; set; }
        public DbSet<Scheduling> Scheduling { get; set; }
        public DbSet<Screen> Screen { get; set; }
        public DbSet<ScreenControl> ScreenControl { get; set; }
        public DbSet<ScrubEditTrack> ScrubEditTrack { get; set; }
        public DbSet<ScrubHeader> ScrubHeader { get; set; }
        public DbSet<ScrubReport> ScrubReport { get; set; }
        public DbSet<ServiceCode> ServiceCode { get; set; }
        public DbSet<State> State { get; set; }
        //public DbSet<sysdiagrams> sysdiagrams { get; set; }
        public DbSet<SystemConfiguration> SystemConfiguration { get; set; }
        public DbSet<Tabs> Tabs { get; set; }
        public DbSet<TESTLOG> TESTLOG { get; set; }
        public DbSet<TPClaim> TPClaim { get; set; }
        public DbSet<TPFileHeader> TPFileHeader { get; set; }
        public DbSet<TPFileXML> TPFileXML { get; set; }
        public DbSet<TPXMLParsedData> TPXMLParsedData { get; set; }
        public DbSet<UBedMaster> UBedMaster { get; set; }
        public DbSet<UserDefinedDescriptions> UserDefinedDescriptions { get; set; }
        public DbSet<UserRole> UserRole { get; set; }
        public DbSet<Users> Users { get; set; }
        public DbSet<XActivity> XActivity { get; set; }
        public DbSet<XAdviceXMLParsedData> XAdviceXMLParsedData { get; set; }
        public DbSet<XClaim> XClaim { get; set; }
        public DbSet<XEncounter> XEncounter { get; set; }
        public DbSet<XFileHeader> XFileHeader { get; set; }
        public DbSet<XFileXML> XFileXML { get; set; }
        public DbSet<XObservation> XObservation { get; set; }
        public DbSet<XPaymentFileXML> XPaymentFileXML { get; set; }
        public DbSet<XPaymentReturn> XPaymentReturn { get; set; }
        public DbSet<BedTransaction> BedTransaction { get; set; }
        public DbSet<ZEDBManualXML> ZEDBManualXML { get; set; }
        public DbSet<SchedulingParameters> SchedulingParameters { get; set; }
        public DbSet<PlaceOfService> PlaceOfService { get; set; }
        public DbSet<BillingModifier> BillingModifier { get; set; }



        /// <summary>
        /// Saves all changes made in this context to the underlying database.
        /// </summary>
        /// <returns>
        /// The number of objects written to the underlying database.
        /// </returns>
        public override int SaveChanges()
        {
            int objectsCount = 0;

            List<DbEntityEntry> newEntities = new List<DbEntityEntry>();

            foreach (
                var ent in
                    this.ChangeTracker.Entries()
                        .Where(
                            p =>
                            p.State == System.Data.Entity.EntityState.Added || p.State == System.Data.Entity.EntityState.Deleted
                            || p.State == System.Data.Entity.EntityState.Modified))
            {
                if (ent.State == System.Data.Entity.EntityState.Added)
                    newEntities.Add(ent);
                else
                {
                    // For each changed record, get the audit record entries and add them
                    foreach (AuditLog x in GetAuditRecordsForChange(ent))
                    {
                        //if (x.UserId == 0)
                        //    x.UserId = 1;

                        this.AuditLog.Add(x);
                    }
                }
            }
            // Default save changes call to actually save changes to the database
            objectsCount += base.SaveChanges();
            // We don't have recordId for insert statements that's why we need to call this method again.
            foreach (var entry in newEntities)
            {
                // For each changed record, get the audit record entries and add them
                foreach (AuditLog changeDescription in GetAuditRecordsForChange(entry))
                {
                    this.AuditLog.Add(changeDescription);
                }

                // TODO: Think about performance here. We are calling db twice for one insertion.
                objectsCount += base.SaveChanges();
            }
            return objectsCount;
        }

        /// <summary>
        /// Gets the audit records for change.
        /// </summary>
        /// <param name="dbEntry">The database entry.</param>
        /// <returns></returns>
        private List<AuditLog> GetAuditRecordsForChange(DbEntityEntry dbEntry)
        {
            List<AuditLog> result = new List<AuditLog>();

            DateTime changeTime = DateTime.Now;

            // Get the Table() attribute, if one exists
            TableAttribute tableAttr = dbEntry.Entity.GetType().GetCustomAttributes(typeof(TableAttribute), false).SingleOrDefault() as TableAttribute;
            var object1 = new object();
            // Get table name (if it has a Table attribute, use that, otherwise get the pluralized name)
            string tableName = tableAttr != null ? tableAttr.Name : dbEntry.Entity.GetType().Name;


            //var sessionUserObj = HttpContext.Current.Session["SessionClass"];
            //var sessionUserId = sessionUserObj != null
            //                        ? ((BillingSystem.Model.SessionClass)sessionUserObj).UserId
            //                        : 0;
            var userIdObj = 0;// 
            if (userIdObj == 0) userIdObj = Convert.ToInt32(GetPropertyValue(dbEntry.Entity, "CreatedBy"));
            if (userIdObj == 0) userIdObj = Convert.ToInt32(GetPropertyValue(dbEntry.Entity, "ModifiedBy"));

            var jj =
                dbEntry.Entity.GetType()
                    .GetProperties()
                    .FirstOrDefault(p => p.GetCustomAttributes(typeof(KeyAttribute), false).Count() > 0);

            // Get primary key value (If you have more than one key column, this will need to be adjusted)
            string keyName = jj != null ? jj.Name : string.Empty;

            if (dbEntry.State == EntityState.Added || dbEntry.State == EntityState.Unchanged)
            {
                // For Inserts, just add the whole record
                // If the entity implements IDescribableEntity, use the description from Describe(), otherwise use ToString()
                result.Add(
                    new AuditLog()
                    {
                        AuditLogID = 0,
                        UserId = userIdObj,
                        CreatedDate = changeTime,
                        EventType = "Added", // Added
                        TableName = tableName,
                        PrimaryKey =
                                Convert.ToInt32(dbEntry.OriginalValues.GetValue<object>(keyName).ToString()),
                        //FieldName = dbEntry.CurrentValues.GetValue<object>(keyName).ToString(),  // Again, adjust this if you have a multi-column key
                        FieldName = "*ALL", // Or make it nullable, whatever you want
                                            //NewValue = dbEntry.CurrentValues.ToObject().ToString()
                    });
            }
            else if (dbEntry.State == EntityState.Deleted)
            {
                // Same with deletes, do the whole record, and use either the description from Describe() or ToString()
                result.Add(
                    new AuditLog()
                    {
                        AuditLogID = 0,
                        UserId = userIdObj,
                        CreatedDate = changeTime,
                        EventType = "Deleted", // Deleted
                        TableName = tableName,
                        PrimaryKey =
                                Convert.ToInt32(dbEntry.OriginalValues.GetValue<object>(keyName).ToString()),
                        FieldName = "*ALL",
                        //NewValue =  dbEntry.OriginalValues.ToObject().ToString()
                    });
            }
            else if (dbEntry.State == EntityState.Modified)
            {
                foreach (string propertyName in dbEntry.OriginalValues.PropertyNames)
                {
                    // For updates, we only want to capture the columns that actually changed
                    if (!object.Equals(dbEntry.OriginalValues.GetValue<object>(propertyName), dbEntry.CurrentValues.GetValue<object>(propertyName)))
                    {
                        result.Add(
                            new AuditLog()
                            {
                                AuditLogID = 0,
                                UserId = userIdObj,
                                CreatedDate = changeTime,
                                EventType = "Modified",    // Modified
                                TableName = tableName,
                                PrimaryKey =
                                        Convert.ToInt32(
                                            dbEntry.OriginalValues.GetValue<object>(keyName).ToString()),
                                FieldName = propertyName,
                                OldValue =
                                        dbEntry.OriginalValues.GetValue<object>(propertyName) == null
                                            ? null
                                            : dbEntry.OriginalValues.GetValue<object>(propertyName).ToString(),
                                NewValue =
                                        dbEntry.CurrentValues.GetValue<object>(propertyName) == null
                                            ? null
                                            : dbEntry.CurrentValues.GetValue<object>(propertyName).ToString()
                            });
                    }
                }
            }
            // Otherwise, don't do anything, we don't care about Unchanged or Detached entities

            return result;
        }

        /// <summary>
        /// Gets the property value.
        /// </summary>
        /// <param name="SourceData">The source data.</param>
        /// <param name="propName">Name of the property.</param>
        /// <returns></returns>
        public object GetPropertyValue(object SourceData, string propName)
        {
            try
            {
                if (SourceData.GetType().GetProperty(propName) != null)
                {
                    var objToreturn = SourceData.GetType().GetProperty(propName).GetValue(SourceData, null);
                    return objToreturn;
                }
                else
                {
                    return 1;
                }
            }
            catch (Exception)
            {
                return 1;
            }
        }

    }
}
